-- Find the total number of orders placed by each customer.

SELECT 
    o.customer_id, COUNT(oitems.order_id) AS count
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
    join order_items as oitems on o.order_id = oitems.order_id
GROUP BY o.customer_id;

 SELECT customer_id, COUNT(*) AS total_orders FROM orders GROUP BY
 customer_id;

--  List the top 10 customers who spent the most on orders 

SELECT 
    o.customer_id,
    ROUND(SUM(oi.quantity * oi.list_price), 2) AS total_spend
FROM
    orders AS o
        JOIN
    order_items AS oi ON o.order_id = oi.order_id
GROUP BY customer_id
ORDER BY total_spend DESC;

-- Show the total revenue generated by each product category.

SELECT 
    p.category_id,
    ROUND(SUM(oi.list_price * oi.quantity), 2) AS revenue_per_category
FROM
    products AS p
        JOIN
    order_items AS oi ON p.product_id = oi.product_id
GROUP BY p.category_id
ORDER BY p.category_id;

-- Find the total quantity sold for each product.

SELECT 
    t.product_id, p.product_name, t.quantity_sold
FROM
    (SELECT 
        oi.product_id, SUM(oi.quantity) AS quantity_sold
    FROM
        order_items AS oi
    GROUP BY oi.product_id) AS t
        JOIN
    products AS p ON p.product_id = t.product_id;
    
-- Get the total sales for each store and sort them from highest to lowest.

SELECT 
    o.store_id,
    ROUND(SUM(oi.list_price * oi.quantity), 2) AS total_sales
FROM
    order_items AS oi
        JOIN
    orders AS o ON o.order_id = oi.order_id
GROUP BY o.store_id
ORDER BY total_sales DESC;

-- Display the total sales per staff member using CTE.

    with tab as (SELECT 
        o.staff_id,
            (ROUND(SUM(oi.list_price * oi.quantity), 2)) AS total_sales
    FROM
        orders AS o
    JOIN order_items AS oi ON o.order_id = oi.order_id
    GROUP BY staff_id) 
    
SELECT 
SELECT 
SELECT 
    tab.staff_id,
    CONCAT(s.first_name, s.last_name) AS staff_name,
    tab.total_sales
FROM tab
        JOIN
    staffs AS s ON tab.staff_id = s.staff_id;
    
-- Find all products that are out of stock across all stores.

SELECT p.product_name FROM stocks s JOIN products p ON
 s.product_id=p.product_id GROUP BY p.product_name HAVING
 SUM(s.quantity)=0;
 
 -- Get the top 5 brands that generated the highest revenue.
SELECT 
    b.brand_name, t.revenue_per_brand
FROM
    (SELECT 
        p.brand_id,
            ROUND(SUM(oi.list_price * oi.quantity), 2) AS revenue_per_brand
    FROM
        products AS p
    JOIN order_items AS oi ON p.product_id = oi.product_id
    GROUP BY brand_id
    ORDER BY revenue_per_brand DESC
    LIMIT 5) AS t
        JOIN
    brands AS b ON t.brand_id = b.brand_id;

 -- Find all customers who havenâ€™t placed any orders yet.
 
SELECT 
    c.customer_id
FROM
    customers AS c
        LEFT JOIN
    orders AS o ON c.customer_id = o.customer_id
WHERE
    o.customer_id IS NULL
GROUP BY c.customer_id;

-- Retrieve the monthly sales totals for the last two years.

SELECT 
    DATE_FORMAT(order_date, '%Y-%m') AS month,
    SUM(oi.quantity * oi.list_price) AS monthly_sales
FROM
    orders o
        JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY month
ORDER BY month;

 










